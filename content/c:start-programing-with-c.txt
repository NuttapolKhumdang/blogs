//; 

Id: 10002
Filename: start-programing-with-c
Backdrop: media/backdrop/10002.webp
Title: Hi! I'm Nuttapol Khumdang
Descriptions: ในปี 2025 ทีมีภาษาโปรแกรมมากมายที่มีความสามารถเทียบเท่าหรือดีกว่าภาษา C ได้ แล้วทำไมเรายังควรต้องศึกษากันอยู่อีกล่ะ?
Tag: C Programing
Create Date: 2025-07-13

//;

h1; ทำไมต้อง C?

ในปี 2025 ทีมีภาษาโปรแกรมมากมายที่มีความสามารถเทียบเท่าหรือดีกว่าภาษา C ได้ แล้วทำไมเรายังควรต้องศึกษากันอยู่อีกล่ะ?

คำตอบก็คือ ภาษา C เป็นภาษาที่มีความตรงไปตรงมา สามารถทำให้เข้าใจการทำงานพื้นฐานของคอมพิวเตอร์ได้อย่างดี เมื่อเราสามารถเข้าใจพื้นฐานได้แล้ว การจะต่อยอดสู่ภาษาอื่นที่มีความซับซ้อนกว่าก็สามารถทำได้ง่าย หรือหากจะย้ายไปภาษาระดับสูงก็ยิ่งทำได้ง่ายดายขึ้นไปอีก

แต่สิ่งที่สำคัญกว่าตัวภาษา ก็คือวิธีการคิดในการแก้ปัญหา การออกแบบทิศทางของโปรแกรม และความเข้าใจใน Algorithm เพื่อที่เราจะได้สร้างโปรแกรมที่สามารถแก้ไขปัญหาได้อย่างถูกต้องนั่นเอง

h1; ภาษา C คืออะไร

เรามาเริ่มทำความรู้จักกับภาษา C กันก่อน

โดยภาษามีต้นกำเนิดมายาวนาน โดย [เดนนิส ริตชี (Dennis Ritchie)](https://th.wikipedia.org/wiki/เดนนิส_ริตชี) เริ่มพัฒนาขึ้นระหว่างปี 1969–1973 และมีเวอร์ชั่นต่าง ๆ ที่พัฒนาออกมาดังนี้

table; ตารางเวอร์ชั่นและมาตรฐานของภาษา C เวอร์ชั่นต่าง ๆ (อ้างอิงจาก [C Notes for Professionals](https://goalkicker.com/CBook))
เวอร์ชั่น  | มาตรฐาน                   | วันที่เผยแพร่
K&R     | n/a                       | 1978-02-22
C89     | ANSI X3.159-1989          | 1989-12-14
C90     | ISO/IEC 9899:1990         | 1990-12-20
C95     | ISO/IEC 9899/AMD1:1995    | 1995-03-30
C99     | ISO/IEC 9899:1999         | 1999-12-16
C11     | ISO/IEC 9899:2011         | 2011-12-15
/table;

ซึ่งภาษา C นั้นเป็นภาษาที่สำคัญมากในทางคอมพิวเตอร์ เนื่องจากเป็นภาษาที่มีความรวดเร็ว ขนาดเล็กและสามารถเข้าถึงฮาร์ดแวร์ได้ ทำให้มีการใช้งานอย่างแพร่หลาย เช่น ใช้ในการเขียนระบบปฏิบัตรการ ใช้ในการควบคุมอุปกรณ์ขนาดเล็กและอุปกรณ์เฉพาะทางหรือ Embedded system
ด้วยความสามารถที่หลากหลายและเป็นพื้นฐานของหลาย ๆ ระบบ เราจึงควรทำความรู้จักไว้นั่นเอง!

h1; เริ่มต้นเขียนโปรแกรมแรก

เริ่มกันที่โปรแกรม Hello, World! กันก่อน

code; C; hello.c
#include <stdio.h>
 
int main(void)
{
    puts("Hello, World!");
    return 0;
}
/code;

h3; แต่ละบรรทัดนั้นเขียนอะไรไว้นะ?

code; C;
#include <stdio.h>
/code;

บรรทัดนี้เป็นการบอก Compiler ให้นำเนื้อหาของไฟล์ Header Library พื้นฐาน `stdio.h` เข้ามาในโปรแกรมของเราเพื่อใช้งาน  
Header คือไฟล์ที่ประกอบด้วยการประกาศฟังก์ชัน มาโคร และชนิดข้อมูลต่าง ๆ ซึ่งต้องนำเข้าไฟล์ header ก่อนที่จะใช้งานฟังก์ชันต่าง ๆ ที่อยู่ในไฟล์นั้น ๆ
ซึ่งไฟล์ Header `stdio.h` ที่เรานำเข้ามาทำให้เราสามารถใช้ฟังก์ชัน `puts` ได้ 

code; C;
int main(void)
/code;

ในบรรทัดต่อมาเป็นการเริ่มประกาศฟังก์ชัน โดยมีการระบุชื่อฟังก์ชันคือ `main` บอกประเภทและจำนวนค่าที่ฟังก์ชันนี้ต้องการรับ `void` (หมายถึงว่างเปล่า) และบอกประเภทข้อมูลที่ฟังก์ชันนี้จะส่งค่ากลับไป `int`

code; C;
{
    ...
}
/code;

ภายในวงเล็บปีกกาเป็นการบอกว่าจุดเริ่มต้นและจุดสิ้นสุดของฟังก์ชั่นอยู่ตรงไหน

code; C;
puts("Hello, World!");
/code;

ในบรรทัดนี้เป็นการเรียกใช้ฟังก์ชัน `puts` ซึงเป็นฟังก์ชันสำหรับส่งออกข้อความสู่หน้าจอและขึ้นบรรทัดใหม่ โดยข้อความจะต้องอยู่ในเครื่องหมายอัญประกาศคู่ `" ... "` (ฟันหนู, Quotation mark)
และในภาษา C เมื่อสิ้นสุดแต่ละคำสั่งจะต้องปิดท้ายคำสั่งด้วยเครื่องหมายอัฒภาค `;` (Semi-colon)

code; C;
return 0;
/code;

ในขั้นตอนสุดท้ายของฟังก์ชัน เราจะส่งค่าคืนตามประเภทข้อมูลที่กำหนดไว้ ในที่นี้คือ `int` ซึงหมายถึงข้อมูลประเภทตัวเลขจำนวนเต็ม โดยเราทำการส่งคืนค่าตัวเลข 0 ซึ่งหมายความว่า โปรแกรมของเราทำงานเสร็จสิ้นโดยไม่มีข้อผิดพลาด
หลังจาก `return 0;` แล้ว โปรแกรมก็จะหยุดทำงานนั่นเอง

h2; Compile แล้วก็วิ่ง!

การที่จะทำให้โค้ดของเราใช้งานได้ เราจะต้องใช้สิ่งที่เรียกว่า `Compiler` ซึ่งทำหน้าที่เตรียมฟังก์ชันพื้นฐานและแปลโค้ดของเราเป็นภาษาของคอมพิวเตอร์ หรือ Executeable file เช่น *hello* ใน Unix/Linux หรือ *hello.exe* ใน Windows

h3; Compile โดยใช้ GCC

GCC (GNU Compiler Collection) เป็น Compiler ที่มีการใช้งานอย่างกว่างขวาง โดยสามารถใช้งานได้โดยการเปิด Terminal/Command Line และไปที่โฟลเดอร์ที่ทำการเก็บไฟล์ *hello.c* ไว้ แล้วพิมพ์คำสั่ง

code; Bash; Terminal
gcc hello.c -o hello # hello.exe หากอยู่บน Windows
/code;

หากไม่พบข้อผิดพลาดใดในโค้ด Compiler จะทำการสร้าง Binary File ของโปรแกรมขึ้นมา ซึ่งจะมีชื่อเดียวกับคำที่อยู่ตามหลัง `-o` ในคำสั่งที่ใส่ลงไป คือ *hello* นั่นเอง

h3; Compile โดยใช้ Clang

การ Compile ด้วย Clang ทำได้โดยการใช้คำสั่ง

code; Bash; Terminal
clang hello.c -o hello # hello.exe หากอยู่บน Windows
/code;

h2; สวัสดี, ชาวโลก!

การจะทำให้โปรแกรมของเราทำงานนั้น หลังจาก Compile แล้ว เราสามารถใช้คำสั่ง

code; Bash; Terminal
./hello # hello.exe หากอยู่บน Windows
/code;

โปรแกรมของเราก็จะทำงาน และแสดงผลลัพธ์ออกมาซึ่งก็คือคำว่า

code; Bash; Terminal
Hello, World!
/code;

นั่นเอง

h2; สวัสดี

ทั้งหมดนี้เป็นพื้นฐานเบื้องต้นในการเขียนโปรแกรมภาษา C และยังมีเนื้อหาอีกมากมายที่ยังไม่ได้กล่าวถึง
บทความนี้ได้รับแรงบันดาลใจจากสิ่งที่ผมได้เรียนมาภายในมหาวิทยาลัย และเนื้อหาเพิ่มเติมอีกมากมายจากอินเตอร์เน็ต โดยเป็นการสรุปและเรียบเรียงด้วยตัวผมใหม่ หากมีข้อผิดพลาดประการใดก็ขอภัยไว้ ณ ที่นี้
หรือหากมีข้อเสนอแนะหรือคำถามใด ๆ สามารถติดต่อได้ที่ [Instagram: _winthrr](https://www.instagram.com/_winthrr) หรือ [nuttapolkhumdang@gmail.com](mailto:nuttapolkhumdang@gmail.com)

h3; อ้างอิง

list; u
[Goalkicker.com: C Notes for Professionals](https://goalkicker.com/CBook). July 13, 2025
/list;